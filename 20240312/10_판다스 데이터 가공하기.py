# 엑셀 파일 dust1.xlxs 파일을 불러와서 데이터프레임을 생성
import datetime

import pandas as pd

dust = pd.read_excel('./input/dust1.xlsx')
print(dust.head())
#        지역     망   측정소코드 측정소명  ...    NO2  PM10  PM25                주소
# 0  서울 송파구  도시대기  111273  송파구  ...  0.066    50    18  서울 송파구 백제고분로 236
# 1  서울 송파구  도시대기  111273  송파구  ...  0.058    48    20  서울 송파구 백제고분로 236
# 2  서울 송파구  도시대기  111273  송파구  ...  0.055    44    20  서울 송파구 백제고분로 236
# 3  서울 송파구  도시대기  111273  송파구  ...  0.055    40    20  서울 송파구 백제고분로 236
# 4  서울 송파구  도시대기  111273  송파구  ...  0.053    38    17  서울 송파구 백제고분로 236
#
# [5 rows x 12 columns]

# 1) 컬럼(변수) 삭제/생성하기
# 데이터 분석에 필요없는 '지역', '망', '측정소코드' 컬럼을 삭제하고 특정값으로 새로운 컬럼을 생성

dust = dust.drop(['지역', '망', '측정소코드'], axis=1)
# axis의 기본값이 axis=0으로 행 삭제가 됨. 컬럼을 삭제하기 위해서는 axis=1을 반드시 사용
print(dust.head())
#   측정소명        측정일시    SO2   CO     O3    NO2  PM10  PM25                주소
# 0  송파구  2021040101  0.004  1.0  0.002  0.066    50    18  서울 송파구 백제고분로 236
# 1  송파구  2021040102  0.004  0.8  0.002  0.058    48    20  서울 송파구 백제고분로 236
# 2  송파구  2021040103  0.004  0.8  0.002  0.055    44    20  서울 송파구 백제고분로 236
# 3  송파구  2021040104  0.003  0.8  0.002  0.055    40    20  서울 송파구 백제고분로 236
# 4  송파구  2021040105  0.004  0.8  0.002  0.053    38    17  서울 송파구 백제고분로 236

# 새로운 칼럼 생성
dust['city'] = '서울'
print(dust.head())
#   측정소명        측정일시    SO2   CO     O3    NO2  PM10  PM25                주소 city
# 0  송파구  2021040101  0.004  1.0  0.002  0.066    50    18  서울 송파구 백제고분로 236   서울
# 1  송파구  2021040102  0.004  0.8  0.002  0.058    48    20  서울 송파구 백제고분로 236   서울
# 2  송파구  2021040103  0.004  0.8  0.002  0.055    44    20  서울 송파구 백제고분로 236   서울
# 3  송파구  2021040104  0.003  0.8  0.002  0.055    40    20  서울 송파구 백제고분로 236   서울
# 4  송파구  2021040105  0.004  0.8  0.002  0.053    38    17  서울 송파구 백제고분로 236   서울

# 2) 컬럼 이름 변경
# 컬럼 이름 변경 방법
# 1) DataFrame.columns=['새이름1', '새이름2', ...]
# 전체 변수 이름을 재설정
# 변수명을 차례대로 재설정. 변수가 많은 경우 적절하지 않음.
# 2) DataFrame.rename(columns={'기존이름':'새이름'}, inplace=True)
# 원하는 변수이름만 수정
# 딕셔너리 구조로 정의. 즉 이전 열이름을 키로 지정하고 새 이름으로 값으로 지정

dust.rename(columns={'측정소명':'name','측정일시':'date','주소':'addr'}, inplace=True)
print(dust.columns)
# Index(['name', 'date', 'SO2', 'CO', 'O3', 'NO2', 'PM10', 'PM25', 'addr',
#        'city'],
#       dtype='object')


# 3) 데이터 형변환
print(dust.dtypes)
# name     object
# date      int64
# SO2     float64
# CO      float64
# O3      float64
# NO2     float64
# PM10      int64
# PM25      int64
# addr     object
# city     object
# dtype: object

# date 칼럼이 숫자형(int)로 저장되어 있음
# 숫자 형식은 문자 형식으로 변환
# astype(str)으로 문자열 형식으로 변환하고 데이터 길이를 날짜 형식 8자리에 적합하도록 str.slice()를 사용하여 첫 8자리만 저장
# (문자열 데이터를 숫자 형식으로 바꾸는 경우는 .astype(int) 사용.)

# 숫자 int형을 문자열로 변환
dust['date'] = dust['date'].astype(str)
dust['date'] = dust['date'].str.slice(0, 8)
print(dust.head())
#   name      date    SO2   CO     O3    NO2  PM10  PM25              addr city
# 0  송파구  20210401  0.004  1.0  0.002  0.066    50    18  서울 송파구 백제고분로 236   서울
# 1  송파구  20210401  0.004  0.8  0.002  0.058    48    20  서울 송파구 백제고분로 236   서울
# 2  송파구  20210401  0.004  0.8  0.002  0.055    44    20  서울 송파구 백제고분로 236   서울
# 3  송파구  20210401  0.003  0.8  0.002  0.055    40    20  서울 송파구 백제고분로 236   서울
# 4  송파구  20210401  0.004  0.8  0.002  0.053    38    17  서울 송파구 백제고분로 236   서울

print(dust.dtypes)
# name     object
# date     object
# SO2     float64
# CO      float64
# O3      float64
# NO2     float64
# PM10      int64
# PM25      int64
# addr     object
# city     object
# dtype: object

# 날짜 형식 활용 : Series.dt.형식

# dust['year'] = dust['date'].dt.year
# dust['month'] = dust['date'].dt.year
# dust['day'] = dust['date'].dt.day
# print(dust.head())


# 4) 데이터 병합하기
# merge() 함수는 두 데이터프레임을 각 데이터에 존재하는 고유값(key)을 기준으로 병합할 때 사용

# pd.merge(df_left, df_right, how='inner', on=None)
# 아무 옵션을 적용하지 않으면, on=None이므로 두 데이터의 공동 열이름(id)을 기준으로 inner(교집합) 조인을 하게 됨
# outer 옵션을 줘서 id를 기준으로 합치되, 어느 한쪽이라는 없는 데이터가 있는 경우 Nan 값이 지정

# 병합할 원본 데이터 확인하기
s1 = pd.read_excel('./input/nation.xlsx')
print(s1.head())
#   국적코드  성별    입국객수    증가수
# 0  A01  남성  125000   8000
# 1  A01  여성  130000  10000
# 2  A05  남성     300     10
# 3  A05  여성     200     50
# 4  A06  남성  158912  24486

s2 = pd.read_excel('./input/code.xlsx')
print(s2.head())
#   국적코드  국적명
# 0  A01  필리핀
# 1  A02   일본
# 2  A03   미국
# 3  A04   중국
# 4  A05   호주

# 데이터 병합하기 : 공통 컬럼을 기준
print(pd.merge(s1, s2, on='국적코드'))
#   국적코드  성별    입국객수    증가수  국적명
# 0  A01  남성  125000   8000  필리핀
# 1  A01  여성  130000  10000  필리핀
# 2  A05  남성     300     10   호주
# 3  A05  여성     200     50   호주
# 4  A06  남성  158912  24486  베트남
# 5  A06  여성  325000  63466  베트남

