# 파일 입출력의 개요
# 파일 입출력 : 컴퓨터에 저장된 파일을 읽어 들이는 것은 물론 파일을 생성해서 컴퓨터에 저장하는 것도 가능
# 파일 입력 input : 기존의 파일 내용을 읽어 들이는 것
# 파일 출력 output : 기존 파일에 새로운 내용을 추가하거나 새로운 파일을 생성하는 것

# 1. 파일 열기
# 입출력 파일을 지정하는 것을 의미. 파일 객체 생성
# 파일 입력과 파일 출력 모두 반드시 파일 열기 작업을 가장 먼저 수행
# 파일 객체 = open(파일명, 모드)

# 1) 파일명
# 입출력 작업을 수행할 파일을 의미
# 파일명만 작성할 수도 있고 경로를 함께 작성할 수도 있음

# 파일명만 작성하는 경우 : 파이썬 소스 파일과 같은 경로에 존재하는 경우
# open('sample.txt')

# 전체 경로를 작성하는 경우 : 빈도가 적음
# open('C:/sample.txt')

# 현재 디렉토리(.)를 기준으로 경로를 결정
# open('./sample.txt')
# open('./input/hello.txt')

# 상위 디렉토리(..)를 기준으로 경로를 결정
# open('../sample.txt')

# 2) 모드
# 입력
# r (read) 읽기
# 출력
# w (write) 쓰기 (파일이 있으면 새로 생성, 없으면 새로 생성)
# a (append) 추가 (파일이 있으면 추가, 없으면 새로 생성)
# x (exclusive) 베타적 추가 (파일이 있으면 오류, 없으면 새로 생성)

# 파일의 종류
# t (text) 텍스트 파일 : 메모장으로 열 수 있는 파일
# b (binary) 바이너리 파일 : 텍스트 파일 외에 모든 파일

# 2. 파일 닫기
# 파일을 더 이상 사용하지 않거나 프로그램을 종료하고자 할 때
# 파일객체.close()

# 3. 파일의 생성
file = open('./output/my_file.txt', 'wt') # 빈파일 생성
print('my_file.txt 파일이 생성되었습니다.')
file.close()

# 텍스트 파일을 새로 만들 수 있는 모드인 wt모드를 사용하여 my_file.txt라는 이름의
# 텍스트 파일을 output 이라는 디렉터리에 생성하는 코드

# with 문
# close() 메소드를 자동으로 호출할 수 있는 문법을 제공
# with문을 사용하면 with문이 끝날 때 언제나 close() 메소드가 자동으로 호출하기 때문에
# 별도의 예외 처리를 하지 않더라도 프로그램이나 파일의 에러로 close()가 호출이 안되는
# 상황을 방지

# 기본 구성
# with open(파일명, 모드) as 파일객체:
#   파일처리코드

with open('./output/my_file_1.txt', 'wt') as file:
    print('my_file_1.txt 파일이 생성되었습니다.')